..
   Copyright (c) 2018-2025 William Emerison Six

   Permission is granted to copy, distribute and/or modify this document
   under the terms of the GNU Free Documentation License, Version 1.3
   or any later version published by the Free Software Foundation;
   with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.

   A copy of the license is available at
   https://www.gnu.org/licenses/fdl-1.3.html.

****************************************
Add Translate Method to Vector - Demo 05
****************************************



Objective
^^^^^^^^^
Restructure the code towards the model view projection
pipeline.

Transforming vertices, such as translating, is one of the core concept
of computer graphics.


.. figure:: _static/screenshots/demo05.png
    :class: no-scale
    :align: center
    :alt: Demo 05
    :figclass: align-center

    Demo 05

How to Execute
^^^^^^^^^^^^^^

Load src/modelviewprojection/demo05.py in Spyder and hit the play button.


Move the Paddles using the Keyboard
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

==============  ======================
Keyboard Input  Action
==============  ======================
*w*             Move Left Paddle Up
*s*             Move Left Paddle Down
*k*             Move Right Paddle Down
*i*             Move Right Paddle Up
==============  ======================


Translation
^^^^^^^^^^^

Dealing with the two Paddles the way we did before is not
ideal.  Both Paddles have the same size, although they are placed
in different spots of the screen.  We should be able to
a set of vertices for the Paddle, relative to the paddle's center,
that is independent of its
placement in NDC.

Rather than using values for each vector relative to NDC, in the
Paddle data structure, each vector will be an offset from
the center of the Paddle.  The center of the paddle will be considered x=0, y=0.
Before rendering, each Paddle's
vertices will need to be translated to its center relative to NDC.

.. figure:: _static/demo05.png
    :class: no-scale
    :align: center
    :alt:
    :figclass: align-center

    Paddle space



All methods on vertices will be returning new vertices,
rather than mutating the instance variables.  The author
does this on purpose to enable method-chaining the Python
methods, which will be useful later on.

Method-chaining is the equivalent of function composition in math.


Code
^^^^

Data Structures
~~~~~~~~~~~~~~~

.. literalinclude:: ../../src/modelviewprojection/mathutils2d.py
   :language: python
   :start-after: doc-region-begin define vector class
   :end-before: doc-region-end define vector class
   :linenos:
   :lineno-match:
   :caption: src/modelviewprojection/demo05.py


We added a translate method to the Vector class.  Given a translation amount, the vector
will be shifted by that amount.  This is a primitive that we will be using to transform
from one space to another.


If the reader wishes to use the data structures to test them out,
import them and try the methods

.. code:: Python

       >>> import src.demo05.demo as demo
       >>> a = demo.Vector(x=1,y=2)
       >>> a.translate(demo.Vector(x=3,y=4))
       Vector(x=4, y=6)

Note the use of "keyword arguments".  Without using keyword
arguments, the code might look like this:

.. code:: Python

       >>> import src.demo05.demo as demo
       >>> a = demo.Vector(1,2)
       >>> a.translate(demo.Vector(x=3,y=4))
       Vector(x=4, y=6)

Keyword arguments allow the reader to understand the purpose of the
parameters are, at the call-site of the function.


.. literalinclude:: ../../src/modelviewprojection/demo05.py
   :language: python
   :start-after: doc-region-begin define paddle class
   :end-before: doc-region-end define paddle class
   :linenos:
   :lineno-match:
   :caption: src/modelviewprojection/demo05.py


Add a position instance variable to the Paddle class.  This position is the center of
the paddle, defined relative to NDC.  The vertices of the paddle will be defined
relative to the center of the paddle.

Instantiation of the Paddles
~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. literalinclude:: ../../src/modelviewprojection/demo05.py
   :language: python
   :start-after: doc-region-begin instantiate paddles
   :end-before: doc-region-end instantiate paddles
   :linenos:
   :lineno-match:
   :caption: src/modelviewprojection/demo05.py


* The vertices are now defined as relative distances from the center of the paddle.  The centers
  of each paddle are placed in positions relative to NDC that preserve the positions of the
  paddles, as they were in the previous demo.

Handling User Input
~~~~~~~~~~~~~~~~~~~

.. literalinclude:: ../../src/modelviewprojection/demo05.py
   :language: python
   :start-after: doc-region-begin define handle movement of paddles
   :end-before: doc-region-end define handle movement of paddles
   :linenos:
   :lineno-match:
   :caption: src/modelviewprojection/demo05.py


* We put the transformation on the center of the paddle, instead
  of directly on each vector.  This is because the vertices are
  defined relative to the center of the paddle.

The Event Loop
~~~~~~~~~~~~~~

.. literalinclude:: ../../src/modelviewprojection/demo05.py
   :language: python
   :start-after: doc-region-begin begin event loop
   :end-before: doc-region-end begin event loop
   :linenos:
   :lineno-match:
   :caption: src/modelviewprojection/demo05.py


.. literalinclude:: ../../src/modelviewprojection/demo05.py
   :language: python
   :start-after: doc-region-begin draw paddle 1
   :end-before: doc-region-end draw paddle 1
   :linenos:
   :lineno-match:
   :caption: src/modelviewprojection/demo05.py



Here each of paddle 1's vertices, which are in their :term:`Modelspace`,
are converted to NDC by calling the translate method on the vector.
This function corresponds to the Cayley graph below, the function
from Paddle 1 space to NDC.

.. literalinclude:: ../../src/modelviewprojection/demo05.py
   :language: python
   :start-after: doc-region-begin draw paddle 2
   :end-before: doc-region-end draw paddle 2
   :linenos:
   :lineno-match:
   :caption: src/modelviewprojection/demo05.py




.. figure:: _static/demo05.png
    :class: no-scale
    :align: center
    :alt:
    :figclass: align-center

    Paddle space

The only part of the diagram that we need to think about right now is the function
that converts from paddle1's space to NDC, and from paddle2's space to NDC.

These functions in the Python code are the translation of the paddle's center (i.e. paddle1.position)
by the vector's offset from the center.

N.B.  In the code, I name the vertices by their space.  I.e. "modelSpace" instead of "vector_relative_to_modelspace".
I do this to emphasize that you should view the transformation as happening to the "graph paper", instead of to each
of the points.  This will be explained more clearly later.
