..
   Copyright (c) 2018-2025 William Emerison Six

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.

Moving the Paddles - Keyboard Input - Demo 04
=============================================


Purpose
^^^^^^^

Add movement to the paddles using keyboard input.

.. figure:: _static/screenshots/demo04.png
    :class: no-scale
    :align: center
    :alt: Demo 01
    :figclass: align-center

    Demo 04


How to Execute
^^^^^^^^^^^^^^

Load src/demo04.py in Spyder and hit the play button

Move the Paddles using the Keyboard
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

==============  ======================
Keyboard Input  Action
==============  ======================
*w*             Move Left Paddle Up
*s*             Move Left Paddle Down
*k*             Move Right Paddle Down
*i*             Move Right Paddle Up
==============  ======================


Paddles which don't move are quite boring.  Let's make them move up or down
by getting keyboard input.

And while we are at it, let's go ahead and create data structures for a Vertex,
and for the collection of vertices that make up a Paddle.

Code
^^^^


Data Structures
~~~~~~~~~~~~~~~

Here we use dataclasses_, which automatically creates on
the class a
constructor, accessor methods, and pretty-printer.  This saves
a lot of boiler plate code.

.. _dataclasses: https://www.youtube.com/watch?v=vRVVyl9uaZc


.. literalinclude:: ../../src/demo04.py
   :language: python
   :start-after: doc-region-begin define vertex class
   :end-before: doc-region-end define vertex class
   :linenos:
   :lineno-match:
   :caption: src/demo04.py


.. literalinclude:: ../../src/demo04.py
   :language: python
   :start-after: doc-region-begin define paddle class
   :end-before: doc-region-end define paddle class
   :linenos:
   :lineno-match:
   :caption: src/demo04.py


Although Python is a dynamically-typed language, we can add type information as helpful hints to the reader,
and for use with static type-checking tools for Python, such as `mypy`_.

.. _mypy: http://mypy-lang.org/


.. literalinclude:: ../../src/demo04.py
   :language: python
   :start-after: doc-region-begin instantiate paddles
   :end-before: doc-region-end instantiate paddles
   :linenos:
   :lineno-match:
   :caption: src/demo04.py


* Create two instances of a Paddle.

I make heavy use of `keyword arguments`_ in Python.

.. _keyword arguments: https://www.pythontutorial.net/python-basics/python-keyword-arguments/

Notice that I am nesting the constructors.  I could have instead have written the
construction of paddle1 like this:


.. code-block:: python

       x = -0.8
       y = 0.3
       vertex_a = Vertex(x, y)
       x = -1.0
       y = 0.3
       vertex_b = Vertex(x, y)
       x = -1.0
       y = -0.3
       vertex_c = Vertex(x, y)
       x = -0.8
       y = -0.3
       vertex_d = Vertex(x, y)
       vertex_list = list(vertex_a, vertex_b, vertex_c, vertex_d)
       r = 0.57
       g = 0.0
       b = 1.0
       paddle1 = Paddle(vertex_list, r, g, b)

But then I would have many local variables, some of whose values
change frequently over time, and most of which are single use variables.
By nesting the constructors as the author has done above, the author
minimizes those issues at the expense of requiring a degree on non-linear
reading of the code, which gets easy with practice.


Query User Input and Use It To Animate
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. math::
   \vec{x'} = \vec{t}(\vec{x}; \vec{c}) = \vec{x} + \vec{c}

.. math::
    \begin{bmatrix}
    x_{1} \\
    x_{2}
    \end{bmatrix}  =
    \vec{t}(
    \begin{bmatrix}
    x_{1} \\
    x_{2}
    \end{bmatrix}; \begin{bmatrix}
    c_{1} \\
    c_{2}
    \end{bmatrix} )  =
    \begin{bmatrix}
    x_{1} \\
    x_{2}
    \end{bmatrix} +
    \begin{bmatrix}
    {c}_{1} \\
    {c}_{2}
    \end{bmatrix}


.. literalinclude:: ../../src/demo04.py
   :language: python
   :start-after: doc-region-begin handle user input for paddle movement
   :end-before: doc-region-end handle user input for paddle movement
   :linenos:
   :lineno-match:
   :caption: src/demo04.py



- If the user presses 's' this frame, subtract 0.1 from the y component of each of
  the vertices in the paddle. If the
  key continues to be held down over time, this value will continue to decrease.
- If the user presses  'w' this frame, add 0.1 more to the y component of each of
  the vertices in the paddle
- If the user presses  'k' this frame, subtract .1.
- If the user presses 'i' this frame, add .1 more.



* when writing to global variables within a nested scope,
  you need to declare their scope as global at the top of the nested scope.
  (technically it is not a global variable, it is local to the current python
  module, but the point remains)




The Event Loop
~~~~~~~~~~~~~~

Monitors can have variable frame-rates, and in order to ensure
that movement is consistent across different monitors, we choose
to only flush the screen at 60 hertz (frames per second).


.. literalinclude:: ../../src/demo04.py
   :language: python
   :start-after: doc-region-begin limit framerate to 60 fps
   :end-before: doc-region-end limit framerate to 60 fps
   :linenos:
   :lineno-match:
   :caption: src/demo04.py


.. literalinclude:: ../../src/demo04.py
   :language: python
   :start-after: doc-region-begin begin event loop
   :end-before: doc-region-end begin event loop
   :linenos:
   :lineno-match:
   :caption: src/demo04.py


.. literalinclude:: ../../src/demo04.py
   :language: python
   :start-after: doc-region-begin poll events and get framebuffer size
   :end-before: doc-region-end poll events and get framebuffer size
   :linenos:
   :lineno-match:
   :caption: src/demo04.py


.. literalinclude:: ../../src/demo04.py
   :language: python
   :start-after: doc-region-begin call draw in square viewport
   :end-before: doc-region-end call draw in square viewport
   :linenos:
   :lineno-match:
   :caption: src/demo04.py


.. literalinclude:: ../../src/demo04.py
   :language: python
   :start-after: doc-region-begin call handle movement of paddles
   :end-before: doc-region-end call handle movement of paddles
   :linenos:
   :lineno-match:
   :caption: src/demo04.py


* We're still near the beginning of the event loop, and we
  haven't drawn the paddles yet.  So we call the function
  to query the user input, which will also modify the vertices'
  values if there was input.

.. literalinclude:: ../../src/demo04.py
   :language: python
   :start-after: doc-region-begin draw paddle 1
   :end-before: doc-region-end draw paddle 1
   :linenos:
   :lineno-match:
   :caption: src/demo04.py




* While rendering, we now loop over the vertices of the paddle.
  The paddles may be displaced from their original position that was hard-coded,
  as the callback may have updated the values based off of the user input.

* When glVertex is now called, we are not directly
  passing numbers into it, but instead we are getting
  the numbers from the data structures of Paddle and its
  associated vertices.

.. figure:: _static/plot3.svg
    :class: no-scale
    :align: center
    :alt: Adding input offset
    :figclass: align-center

    Adding input offset to Paddle 1



.. literalinclude:: ../../src/demo04.py
   :language: python
   :start-after: doc-region-begin draw paddle 2
   :end-before: doc-region-end draw paddle 2
   :linenos:
   :lineno-match:
   :caption: src/demo04.py


.. figure:: _static/plot4.svg
    :class: no-scale
    :align: center
    :alt: Adding input offset to Paddle 1
    :figclass: align-center

    Adding input offset to Paddle 2


.. literalinclude:: ../../src/demo04.py
   :language: python
   :start-after: doc-region-begin flush framebuffer
   :end-before: doc-region-end flush framebuffer
   :linenos:
   :lineno-match:
   :caption: src/demo04.py
